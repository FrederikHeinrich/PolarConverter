import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'java'
    id 'java-library'
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.goooler.shadow' version '8.1.8'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation 'net.minestom:minestom-snapshots:fda23e4ea1'
    implementation 'dev.hollowcube:polar:1.11.0'
    shadow 'net.minestom:minestom-snapshots:fda23e4ea1'
    shadow 'dev.hollowcube:polar:1.11.0'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"
    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release.set(targetJavaVersion)
}

jar {
    from(sourceSets.main.output) {
        include 'net/kyori/**'
        include 'net/minestom/**'
        include 'dev/hollowcube/**'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        include 'META-INF/services/**'
        include 'net/kyori/**'
        include 'net/minestom/**'
        include 'dev/hollowcube/**'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    //minimize()
    configurations = [project.configurations.shadow]
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn tasks.shadowJar
    input.set(tasks.shadowJar.archiveFile)
    addNestedDependencies.set(true)
}

tasks.assemble.dependsOn tasks.remappedShadowJar

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        // Add repositories to publish to here.
    }
}
